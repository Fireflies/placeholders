{"name":"Placeholders","tagline":"Flexible, cross platform API for delivering customised content to players.","body":"### What is this fantastic project?!\r\nAs a person that frequently decompiles the work of other people, I see a lot of repeated implementations. I'm not saying that every developer should be using a framework or centralised system, but when you have 3-10 classes per implementation being re-implemented every time then you should really consider looking into publishing or using a library you can re-use with minimal effort. The [placeholders](https://github.com/Fireflies/placeholders) project allows developers to provide people with flexible and easy to maintain dynamic content. You shouldn't have to fret about updating every application that includes your (often inconsistently) re-implemented classes, you should be able to drag, drop and play.\r\n\r\n### Harnessing The Awesome Power Of Placeholders\r\nHere are some examples to demonstrate how easy it is to create your own placeholders that can be re-used by anything depending on this API.\r\n\r\n#### Bukkit\r\n```java\r\n/* \r\n * External imports omitted.\r\n */\r\n\r\nimport ninja.smirking.framework.placeholder.bukkit.BukkitPlaceholderManager;\r\n\r\npublic class MyPlugin extends JavaPlugin {\r\n    private BukkitPlaceholderManager placeholderManager;\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        if(getServer().getPluginManager().isPluginEnabled(\"PlaceholderEngine\")) {\r\n            RegisteredServiceProvider<BukkitPlaceholderManager> service = getServer().getServicesManager().getRegistration(BukkitPlaceholderManager.class);\r\n            if (service.getProvider() != null) {\r\n                placeholderManager = service.getProvider();\r\n                placeholderManager.registerMapping(this, \"player_display_name\", Player::getDisplayName);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAlternatively you can invoke the `PlaceholderPlugin#getPlaceholderManager()` method if you dislike Bukkit's service manager.\r\n\r\n#### Formatting Messages\r\nOnce you've acquired a `PlaceholderManager` instance you may invoke the `format` method on it to format any message to your heart's content. Check the examples above if you are looking for platform specific code. You may use as many placeholders in a string as you wish, though bear in mind that using too many at once may have an impact on your application performance.\r\n\r\n```java\r\nmyPlayer.sendMessage(placeholderManager.format(myPlayer, \"Hello there #{player_name}\"));\r\n```\r\n\r\n### Bug hunting\r\nIf you've discovered a bug please report it using the [issue tracker](https://github.com/Fireflies/placeholders/issues), I would hate to see people waste time faffing around trying to fix it themselves when other people may be able to swoop in and help out.\r\n","google":"UA-71387900-1","note":"Don't delete this file! It's used internally to help with page regeneration."}